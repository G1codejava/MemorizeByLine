<p><!DOCTYPE html> <html> <head>  <meta charset=&quot;UTF-8&quot;>  <title>Memorize the Poem - Fill in the Blanks Game</title>  <!-- Import Nunito font from Google Fonts -->  <link href=&quot;https://fonts.googleapis.com/css2?family=Nunito:wght@400;700&amp;display=swap&quot; rel=&quot;stylesheet&quot;>  <style>  /* Global Styles */  body {  font-family: 'Nunito', sans-serif;  max-width: 800px;  margin: auto;  padding: 20px;  background: linear-gradient(135deg, #2e2e2e, #1c1c1c);  color: #fff;  }  h1.animated-title {  text-align: center;  font-size: 2em;  margin-bottom: 20px;  animation: rainbow 8s linear infinite, float-rotate 8s ease-in-out infinite;  }  /* Rainbow animation for text */  .rainbow {  animation: rainbow 8s linear infinite;  }  /* Screen Containers */  .screen {  display: none;  }  /* Home Screen */  #homeScreen {  text-align: center;  margin-top: 50px;  }  #homeScreen button {  margin: 10px;  padding: 10px 20px;  background: linear-gradient(45deg, #555, #777);  color: #fff;  border: none;  border-radius: 5px;  cursor: pointer;  transition: transform 0.2s, background 0.2s;  font-size: 1em;  }  #homeScreen button:hover {  background: linear-gradient(45deg, #666, #888);  transform: scale(1.03);  }  /* Developed by text */  #homeFooter {  color: #ccc;  margin-top: 30px;  font-size: 0.8em;  }  /* Options Screen */  #optionsScreen {  position: relative;  text-align: center;  margin-top: 30px;  }  /* Back Button in Options Screen at top left */  #backBtn {  position: absolute;  top: 10px;  left: 10px;  padding: 5px 10px;  background: linear-gradient(45deg, #555, #777);  color: #fff;  border: none;  border-radius: 5px;  cursor: pointer;  transition: transform 0.2s, background 0.2s;  font-size: 0.9em;  }  #backBtn:hover {  background: linear-gradient(45deg, #666, #888);  transform: scale(1.03);  }  /* Option Buttons container */  #optionsButtons {  display: flex;  flex-wrap: wrap;  justify-content: center;  gap: 5px;  margin: 40px auto 20px;  max-width: 400px;  }  .optionBtn {  padding: 5px 8px;  font-size: 0.8em;  background: #555;  border: none;  border-radius: 5px;  cursor: pointer;  color: #fff;  transition: background 0.2s;  min-width: 70px;  text-align: center;  }  .optionBtn:hover {  background: #666;  }  /* Game Screen */  #gameScreen {  margin-top: 30px;  }  #lineContainer {  font-size: 1.2em;  margin-bottom: 10px;  }  #lineContainer span, #lineContainer input {  margin-right: 5px;  }  #lineContainer input {  padding: 5px;  width: 80px;  background: #333;  color: #fff;  border: none;  border-radius: 5px;  text-align: center;  transition: box-shadow 0.3s ease;  }  #lineContainer input:focus {  outline: none;  box-shadow: 0 0 5px rgba(255,255,255,0.8);  }  /* Button Styles for Game Screen */  button {  padding: 10px 20px;  background: linear-gradient(45deg, #555, #777);  color: #fff;  border: none;  border-radius: 5px;  cursor: pointer;  transition: transform 0.2s, background 0.2s;  font-size: 1em;  }  button:hover {  background: linear-gradient(45deg, #666, #888);  transform: scale(1.03);  }  button:active {  transform: scale(0.98);  }  /* Individual Reveal Buttons next to inputs */  .revealBtn {  padding: 5px 10px;  font-size: 0.9em;  margin-left: 3px;  background: #888;  border: none;  border-radius: 5px;  cursor: pointer;  }  /* Message and Progress */  #lineMessage {  margin-top: 10px;  color: #ff5555;  }  #progress {  margin-top: 20px;  border-top: 1px solid #444;  padding-top: 10px;  }  /* Completion Screen */  #completionScreen {  text-align: center;  margin-top: 50px;  }  /* Animations */  @keyframes rainbow {  0% { color: red; }  14% { color: orange; }  28% { color: yellow; }  42% { color: green; }  57% { color: blue; }  71% { color: indigo; }  85% { color: violet; }  100% { color: red; }  }  @keyframes float-rotate {  0% { transform: translate(0, 0) rotate(0deg); }  25% { transform: translate(5px, -5px) rotate(2deg); }  50% { transform: translate(0, 0) rotate(0deg); }  75% { transform: translate(-5px, 5px) rotate(-2deg); }  100% { transform: translate(0, 0) rotate(0deg); }  }  @keyframes pulse-green {  0% { box-shadow: 0 0 0 0 rgba(0, 255, 0, 0.7); }  70% { box-shadow: 0 0 0 10px rgba(0, 255, 0, 0); }  100% { box-shadow: 0 0 0 0 rgba(0, 255, 0, 0); }  }  @keyframes pulse-red {  0% { box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.7); }  70% { box-shadow: 0 0 0 10px rgba(255, 0, 0, 0); }  100% { box-shadow: 0 0 0 0 rgba(255, 0, 0, 0); }  }  .pulse-green {  animation: pulse-green 1s ease-out;  }  .pulse-red {  animation: pulse-red 1s ease-out;  }  </style> </head> <body>  <h1 class=&quot;animated-title&quot;>Memorize the Poem: Fill in the Blanks</h1>    <!-- Home Screen -->  <div id=&quot;homeScreen&quot; class=&quot;screen&quot;>  <button id=&quot;startGameHomeBtn&quot;>Start Game</button>  <button id=&quot;wordOptionsBtn&quot;>Word Options</button>  <div id=&quot;homeFooter&quot;>developed by g3b3 :D</div>  </div>    <!-- Options Screen -->  <div id=&quot;optionsScreen&quot; class=&quot;screen&quot;>  <button id=&quot;backBtn&quot;>Back</button>  <p>  Toggle each button below to choose which word positions (1st&ndash;8th) you want to memorize.  &quot;Given&quot; means the word will be shown; &quot;Memorize&quot; means that word will be replaced by a blank. </p>  <div id=&quot;optionsButtons&quot;>  <button class=&quot;optionBtn&quot; data-index=&quot;0&quot;>Given</button>  <button class=&quot;optionBtn&quot; data-index=&quot;1&quot;>Given</button>  <button class=&quot;optionBtn&quot; data-index=&quot;2&quot;>Given</button>  <button class=&quot;optionBtn&quot; data-index=&quot;3&quot;>Given</button>  <button class=&quot;optionBtn&quot; data-index=&quot;4&quot;>Given</button>  <button class=&quot;optionBtn&quot; data-index=&quot;5&quot;>Given</button>  <button class=&quot;optionBtn&quot; data-index=&quot;6&quot;>Given</button>  <button class=&quot;optionBtn&quot; data-index=&quot;7&quot;>Given</button>  </div>  </div>    <!-- Game Screen -->  <div id=&quot;gameScreen&quot; class=&quot;screen&quot;>  <div id=&quot;lineContainer&quot;></div>  <br>  <button id=&quot;submitLineBtn&quot;>Submit</button>  <div id=&quot;lineMessage&quot;></div>  <div id=&quot;progress&quot;></div>  </div>    <!-- Completion Screen -->  <div id=&quot;completionScreen&quot; class=&quot;screen&quot;>  <h2><span class=&quot;rainbow&quot;>Congratulations!</span> You've completed the game.</h2>  <button id=&quot;backHomeBtn&quot;>Back to Home</button>  </div>    <script>  // Global poem lines  const poemLines = [  &quot;The day is done, and the darkness&quot;,  &quot;Falls from the wings of Night,&quot;,  &quot;As a feather is wafted downward&quot;,  &quot;From an eagle in his flight.&quot;,  &quot;&quot;,  &quot;I see the lights of the village&quot;,  &quot;Gleam through the rain and the mist,&quot;,  &quot;And a feeling of sadness comes o'er me&quot;,  &quot;That my soul cannot resist:&quot;,  &quot;&quot;,  &quot;A feeling of sadness and longing,&quot;,  &quot;That is not akin to pain,&quot;,  &quot;And resembles sorrow only&quot;,  &quot;As the mist resembles the rain.&quot;,  &quot;&quot;,  &quot;Come, read to me some poem,&quot;,  &quot;Some simple and heartfelt lay,&quot;,  &quot;That shall soothe this restless feeling,&quot;,  &quot;And banish the thoughts of day.&quot;,  &quot;&quot;,  &quot;Not from the grand old masters,&quot;,  &quot;Not from the bards sublime,&quot;,  &quot;Whose distant footsteps echo&quot;,  &quot;Through the corridors of Time.&quot;,  &quot;&quot;,  &quot;For, like strains of martial music,&quot;,  &quot;Their mighty thoughts suggest&quot;,  &quot;Life's endless toil and endeavor;&quot;,  &quot;And to-night I long for rest.&quot;,  &quot;&quot;,  &quot;Read from some humbler poet,&quot;,  &quot;Whose songs gushed from his heart,&quot;,  &quot;As showers from the clouds of summer,&quot;,  &quot;Or tears from the eyelids start;&quot;,  &quot;&quot;,  &quot;Who, through long days of labor,&quot;,  &quot;And nights devoid of ease,&quot;,  &quot;Still heard in his soul the music&quot;,  &quot;Of wonderful melodies.&quot;,  &quot;&quot;,  &quot;Such songs have power to quiet&quot;,  &quot;The restless pulse of care,&quot;,  &quot;And come like the benediction&quot;,  &quot;That follows after prayer.&quot;,  &quot;&quot;,  &quot;Then read from the treasured volume&quot;,  &quot;The poem of thy choice,&quot;,  &quot;And lend to the rhyme of the poet&quot;,  &quot;The beauty of thy voice.&quot;,  &quot;&quot;,  &quot;And the night shall be filled with music,&quot;,  &quot;And the cares, that infest the day,&quot;,  &quot;Shall fold their tents, like the Arabs,&quot;,  &quot;And as silently steal away.&quot;  ];    // Global variables  let currentLineIndex = 0;  // false = Given; true = Memorize  let wordOptions = [false, false, false, false, false, false, false, false];    // Get screen elements  const homeScreen = document.getElementById(&quot;homeScreen&quot;);  const optionsScreen = document.getElementById(&quot;optionsScreen&quot;);  const gameScreen = document.getElementById(&quot;gameScreen&quot;);  const completionScreen = document.getElementById(&quot;completionScreen&quot;);    // Home screen buttons  const startGameHomeBtn = document.getElementById(&quot;startGameHomeBtn&quot;);  const wordOptionsBtn = document.getElementById(&quot;wordOptionsBtn&quot;);    // Options screen back button  const backBtn = document.getElementById(&quot;backBtn&quot;);    // Option toggle buttons  const optionBtns = document.querySelectorAll(&quot;.optionBtn&quot;);    // Game screen elements  const lineContainer = document.getElementById(&quot;lineContainer&quot;);  const submitLineBtn = document.getElementById(&quot;submitLineBtn&quot;);  const lineMessage = document.getElementById(&quot;lineMessage&quot;);  const progressDiv = document.getElementById(&quot;progress&quot;);    // Completion screen back to home button  const backHomeBtn = document.getElementById(&quot;backHomeBtn&quot;);    // Show a given screen and hide the others  function showScreen(screen) {  homeScreen.style.display = &quot;none&quot;;  optionsScreen.style.display = &quot;none&quot;;  gameScreen.style.display = &quot;none&quot;;  completionScreen.style.display = &quot;none&quot;;  screen.style.display = &quot;block&quot;;  }    // Home screen events  startGameHomeBtn.addEventListener(&quot;click&quot;, startGame);  wordOptionsBtn.addEventListener(&quot;click&quot;, () => {  showScreen(optionsScreen);  });    // Options screen back button event  backBtn.addEventListener(&quot;click&quot;, () => {  showScreen(homeScreen);  });    // Completion screen back to home event  backHomeBtn.addEventListener(&quot;click&quot;, () => {  showScreen(homeScreen);  });    // Toggle option buttons (positions 1&ndash;8)  optionBtns.forEach(btn => {  btn.addEventListener(&quot;click&quot;, () => {  const index = parseInt(btn.getAttribute(&quot;data-index&quot;));  wordOptions[index] = !wordOptions[index];  if(wordOptions[index]) {  btn.textContent = &quot;Memorize&quot;;  btn.style.backgroundColor = &quot;#4CAF50&quot;;  } else {  btn.textContent = &quot;Given&quot;;  btn.style.backgroundColor = &quot;&quot;;  }  });  });    // Helper: Normalize word for comparison  function normalizeWord(word) {  return word.replace(/[^a-zA-Z0-9]/g, &quot;&quot;).toLowerCase();  }    // For current line, track input objects: {input, correct, attempt, revealBtn}  let currentInputs = [];    // Render the current poem line based on wordOptions  function renderCurrentLine() {  lineContainer.innerHTML = &quot;&quot;;  currentInputs = [];  lineMessage.textContent = &quot;&quot;;    if(currentLineIndex >= poemLines.length) {  showScreen(completionScreen);  return;  }    const line = poemLines[currentLineIndex];  if(line.trim() === &quot;&quot;) {  progressDiv.innerHTML += &quot;<br>&quot;;  currentLineIndex++;  renderCurrentLine();  return;  }    const words = line.trim().split(&quot; &quot;);  words.forEach((word, index) => {  const span = document.createElement(&quot;span&quot;);  if(index < 8 &amp;&amp; wordOptions[index]) {  const input = document.createElement(&quot;input&quot;);  input.type = &quot;text&quot;;  input.style.width = &quot;80px&quot;;  input.setAttribute(&quot;data-answer&quot;, normalizeWord(word));  input.setAttribute(&quot;data-attempt&quot;, &quot;0&quot;);  input.style.marginRight = &quot;5px&quot;;  span.appendChild(input);    const revealBtn = document.createElement(&quot;button&quot;);  revealBtn.textContent = &quot;Reveal&quot;;  revealBtn.className = &quot;revealBtn&quot;;  revealBtn.style.display = &quot;none&quot;;  revealBtn.addEventListener(&quot;click&quot;, () => {  input.value = word;  });  span.appendChild(revealBtn);    currentInputs.push({input: input, correct: normalizeWord(word), attempt: 0, revealBtn: revealBtn});  } else {  span.textContent = word;  span.style.marginRight = &quot;5px&quot;;  }  lineContainer.appendChild(span);  lineContainer.appendChild(document.createTextNode(&quot; &quot;));  });  }    // Check answers for the current line  function checkCurrentLine() {  let allCorrect = true;  currentInputs.forEach(obj => {  if(obj.input.disabled) return;  const userAnswer = normalizeWord(obj.input.value.trim());  if(userAnswer === obj.correct) {  obj.input.disabled = true;  obj.input.style.backgroundColor = &quot;#777&quot;;  obj.input.classList.add(&quot;pulse-green&quot;);  setTimeout(() => {  obj.input.classList.remove(&quot;pulse-green&quot;);  }, 1000);  } else {  allCorrect = false;  obj.attempt++;  obj.input.classList.add(&quot;pulse-red&quot;);  setTimeout(() => {  obj.input.classList.remove(&quot;pulse-red&quot;);  }, 1000);  if(obj.attempt >= 2) {  obj.revealBtn.style.display = &quot;inline-block&quot;;  }  }  });  if(allCorrect) {  // Use the full original line for progress.  const originalLine = poemLines[currentLineIndex];  progressDiv.innerHTML += &#96;<div>${originalLine}</div>&#96;;  currentLineIndex++;  renderCurrentLine();  } else {  lineMessage.textContent = &quot;Some answers are incorrect. Please try again.&quot;;  }  }    function startGame() {  currentLineIndex = 0;  progressDiv.innerHTML = &quot;&quot;;  renderCurrentLine();  showScreen(gameScreen);  }    submitLineBtn.addEventListener(&quot;click&quot;, checkCurrentLine);    // Start on home screen  showScreen(homeScreen);  </script> </body> </html></p>